$date
	Tue Feb 27 12:49:05 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module alu_top $end
$scope module alu $end
$var wire 4 ! a [3:0] $end
$var wire 1 " arith $end
$var wire 4 # b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 % invert $end
$var wire 1 & pass $end
$var wire 4 ' y [3:0] $end
$var wire 4 ( s0 [3:0] $end
$var wire 1 ) overfl $end
$var wire 1 * cout $end
$scope module and_add_i1 $end
$var wire 1 " add $end
$var wire 4 + b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 & pass $end
$var wire 4 , y [3:0] $end
$var wire 4 - s2 [3:0] $end
$var wire 4 . s1 [3:0] $end
$var wire 4 / s0 [3:0] $end
$var wire 1 ) overfl $end
$var wire 1 * cout $end
$var wire 4 0 a [3:0] $end
$scope module four_bit_adder_i0 $end
$var wire 4 1 b [3:0] $end
$var wire 1 $ cin $end
$var wire 1 * cout $end
$var wire 1 ) overfl $end
$var wire 4 2 y [3:0] $end
$var wire 1 3 s9 $end
$var wire 1 4 s8 $end
$var wire 1 5 s7 $end
$var wire 1 6 s6 $end
$var wire 1 7 s5 $end
$var wire 1 8 s4 $end
$var wire 1 9 s3 $end
$var wire 1 : s2 $end
$var wire 1 ; s14 $end
$var wire 1 < s13 $end
$var wire 1 = s12 $end
$var wire 1 > s11 $end
$var wire 1 ? s10 $end
$var wire 1 @ s1 $end
$var wire 1 A s0 $end
$var wire 1 B cout_temp $end
$var wire 4 C a [3:0] $end
$scope module full_adder_i0 $end
$var wire 1 9 a $end
$var wire 1 5 b $end
$var wire 1 $ cin $end
$var wire 1 ; cout $end
$var wire 1 > sum $end
$upscope $end
$scope module full_adder_i1 $end
$var wire 1 : a $end
$var wire 1 6 b $end
$var wire 1 ; cin $end
$var wire 1 < cout $end
$var wire 1 ? sum $end
$upscope $end
$scope module full_adder_i2 $end
$var wire 1 @ a $end
$var wire 1 7 b $end
$var wire 1 < cin $end
$var wire 1 = cout $end
$var wire 1 3 sum $end
$upscope $end
$scope module full_adder_i3 $end
$var wire 1 A a $end
$var wire 1 8 b $end
$var wire 1 = cin $end
$var wire 1 B cout $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i1 $end
$var wire 4 D a [3:0] $end
$var wire 4 E b [3:0] $end
$var wire 1 " sel $end
$var wire 4 F y [3:0] $end
$var wire 1 G s9 $end
$var wire 1 H s8 $end
$var wire 1 I s7 $end
$var wire 1 J s6 $end
$var wire 1 K s5 $end
$var wire 1 L s4 $end
$var wire 1 M s3 $end
$var wire 1 N s2 $end
$var wire 1 O s11 $end
$var wire 1 P s10 $end
$var wire 1 Q s1 $end
$var wire 1 R s0 $end
$scope module two_bit_mux_i0 $end
$var wire 1 L a $end
$var wire 1 H b $end
$var wire 1 " s $end
$var wire 1 R y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 J a $end
$var wire 1 P b $end
$var wire 1 " s $end
$var wire 1 N y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 K a $end
$var wire 1 G b $end
$var wire 1 " s $end
$var wire 1 Q y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 I a $end
$var wire 1 O b $end
$var wire 1 " s $end
$var wire 1 M y $end
$upscope $end
$upscope $end
$scope module four_bit_mux_i2 $end
$var wire 4 S a [3:0] $end
$var wire 1 & sel $end
$var wire 4 T y [3:0] $end
$var wire 1 U s9 $end
$var wire 1 V s8 $end
$var wire 1 W s7 $end
$var wire 1 X s6 $end
$var wire 1 Y s5 $end
$var wire 1 Z s4 $end
$var wire 1 [ s3 $end
$var wire 1 \ s2 $end
$var wire 1 ] s11 $end
$var wire 1 ^ s10 $end
$var wire 1 _ s1 $end
$var wire 1 ` s0 $end
$var wire 4 a b [3:0] $end
$scope module two_bit_mux_i0 $end
$var wire 1 Z a $end
$var wire 1 V b $end
$var wire 1 & s $end
$var wire 1 ` y $end
$upscope $end
$scope module two_bit_mux_i1 $end
$var wire 1 X a $end
$var wire 1 ^ b $end
$var wire 1 & s $end
$var wire 1 \ y $end
$upscope $end
$scope module two_bit_mux_i2 $end
$var wire 1 Y a $end
$var wire 1 U b $end
$var wire 1 & s $end
$var wire 1 _ y $end
$upscope $end
$scope module two_bit_mux_i3 $end
$var wire 1 W a $end
$var wire 1 ] b $end
$var wire 1 & s $end
$var wire 1 [ y $end
$upscope $end
$upscope $end
$upscope $end
$scope module not_neg_i0 $end
$var wire 4 b a [3:0] $end
$var wire 1 % invert $end
$var wire 1 " neg $end
$var wire 1 c s1 $end
$var wire 4 d y [3:0] $end
$var wire 4 e s0 [3:0] $end
$var wire 1 f cry $end
$scope module incrementer_i0 $end
$var wire 4 g a [3:0] $end
$var wire 1 c inc $end
$var wire 4 h y [3:0] $end
$var wire 1 i s9 $end
$var wire 1 j s8 $end
$var wire 1 k s7 $end
$var wire 1 l s6 $end
$var wire 1 m s5 $end
$var wire 1 n s4 $end
$var wire 1 o s3 $end
$var wire 1 p s2 $end
$var wire 1 q s10 $end
$var wire 1 r s1 $end
$var wire 1 s s0 $end
$var wire 1 f cry $end
$scope module half_adder_i0 $end
$var wire 1 i a $end
$var wire 1 c b $end
$var wire 1 m cry $end
$var wire 1 q sum $end
$upscope $end
$scope module half_adder_i1 $end
$var wire 1 n a $end
$var wire 1 m b $end
$var wire 1 r cry $end
$var wire 1 l sum $end
$upscope $end
$scope module half_adder_i2 $end
$var wire 1 s a $end
$var wire 1 r b $end
$var wire 1 o cry $end
$var wire 1 p sum $end
$upscope $end
$scope module half_adder_i3 $end
$var wire 1 k a $end
$var wire 1 o b $end
$var wire 1 f cry $end
$var wire 1 j sum $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1s
1r
0q
0p
1o
1n
1m
0l
1k
0j
1i
b0 h
b1111 g
1f
b1111 e
b0 d
1c
b0 b
b0 a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
b0 T
b0 S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
b0 F
b0 E
b0 D
b0 C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
0*
0)
b0 (
b0 '
0&
1%
0$
b0 #
1"
b0 !
$end
#10
0_
0`
0Y
1*
1B
0Z
0Q
0R
0)
0G
1=
0H
0\
b0 '
b0 ,
b0 T
0[
03
04
0X
0W
1;
1I
1<
0J
1V
1A
0N
b0 -
b0 F
b0 S
0M
b1 /
b1 D
1U
1@
1j
0f
1]
19
0^
0:
1p
0o
0P
0O
1q
0m
b1101 (
b1101 0
b1101 C
b1101 a
b1101 d
b1101 h
0l
0r
0?
b0 .
b0 2
b0 E
0>
0i
0n
b1100 e
b1100 g
16
15
b11 #
b11 +
b11 1
b11 !
b11 b
#20
1\
0`
b11 '
b11 ,
b11 T
1[
1)
1X
0=
0Z
1W
1N
0R
b11 -
b11 F
b11 S
1M
0<
1P
0U
0@
0H
1O
1?
b1001 (
b1001 0
b1001 C
b1001 a
b1001 d
b1001 h
0p
0I
1L
04
b11 .
b11 2
b11 E
1>
0;
0s
b1000 /
b1000 D
b1000 e
b1000 g
18
05
b1010 #
b1010 +
b1010 1
b111 !
b111 b
#30
0\
b1001 '
b1001 ,
b1001 T
1`
1&
#40
1Z
0X
1R
b1001 -
b1001 F
b1001 S
0N
1H
0)
0P
0L
14
0*
0B
b1001 .
b1001 2
b1001 E
0?
0\
b0 /
b0 D
1`
b1001 '
b1001 ,
b1001 T
1[
08
06
b0 #
b0 +
b0 1
0&
#50
xY
xX
xQ
xN
xf
x\
xJ
x_
x=
xK
x<
xo
xH
x)
xG
xP
xr
x^
x:
xU
x@
xV
xA
xI
xL
x4
x*
xB
x3
x?
x`
bx '
bx ,
bx T
x[
xm
xl
xp
xj
xZ
xW
x]
x9
x;
bx /
bx D
xi
xn
xs
xk
xR
bx -
bx F
bx S
xM
bx (
bx 0
bx C
bx a
bx d
bx h
xq
xO
x8
x7
x6
x5
bx e
bx g
xc
bx .
bx 2
bx E
x>
bx #
bx +
bx 1
bx !
bx b
x&
x%
x"
x$
#80
